// Script de test pour v√©rifier l'acc√®s √† tarification
console.log('=== TEST ACC√àS TARIFICATION ===')

// Fonction pour tester une URL
async function testUrl(url, description) {
  try {
    console.log(`\nüîç Test: ${description}`)
    console.log(`   URL: ${url}`)
    
    const response = await fetch(url, {
      method: 'HEAD',
      mode: 'no-cors' // Pour √©viter les erreurs CORS en d√©veloppement
    })
    
    console.log(`   ‚úÖ Page accessible`)
    return true
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`)
    return false
  }
}

// Fonction pour v√©rifier l'authentification
function checkAuth() {
  console.log('\nüîê V√©rification de l\'authentification:')
  
  const token = localStorage.getItem('access_token')
  const user = localStorage.getItem('user')
  const boutique = localStorage.getItem('boutique')
  
  console.log(`   Token: ${token ? '‚úÖ Pr√©sent' : '‚ùå Absent'}`)
  console.log(`   User: ${user ? '‚úÖ Pr√©sent' : '‚ùå Absent'}`)
  console.log(`   Boutique: ${boutique ? '‚úÖ Pr√©sente' : '‚ùå Absente'}`)
  
  if (user) {
    try {
      const userData = JSON.parse(user)
      console.log(`   R√¥le: ${userData.role || 'Non d√©fini'}`)
      console.log(`   Email: ${userData.email || 'Non d√©fini'}`)
      
      if (userData.role === 'superadmin') {
        console.log('   ‚úÖ Acc√®s autoris√© √† /superadmin/tarification')
      } else {
        console.log('   ‚ùå R√¥le insuffisant pour /superadmin/tarification')
      }
    } catch (e) {
      console.log(`   ‚ùå Erreur parsing user: ${e.message}`)
    }
  }
}

// Fonction pour simuler une connexion superadmin (test uniquement)
function simulateSuperAdmin() {
  console.log('\nüß™ Simulation connexion SuperAdmin (TEST UNIQUEMENT):')
  
  localStorage.setItem('access_token', 'test-token-' + Date.now())
  localStorage.setItem('user', JSON.stringify({
    id: 1,
    email: 'admin@test.com',
    role: 'superadmin',
    entreprise: 1
  }))
  
  console.log('   ‚úÖ Connexion simul√©e')
  console.log('   ‚ö†Ô∏è  ATTENTION: Ceci est pour les tests uniquement!')
}

// Fonction pour effacer les donn√©es de test
function clearTestData() {
  console.log('\nüßπ Nettoyage des donn√©es de test:')
  localStorage.removeItem('access_token')
  localStorage.removeItem('user')
  localStorage.removeItem('boutique')
  console.log('   ‚úÖ Donn√©es effac√©es')
}

// Ex√©cution des tests
async function runTests() {
  console.log('D√©marrage des tests...')
  
  // V√©rifier l'authentification actuelle
  checkAuth()
  
  // Tester les URLs
  const baseUrl = window.location.origin
  
  await testUrl(`${baseUrl}/debug-auth`, 'Page de diagnostic')
  await testUrl(`${baseUrl}/superadmin/tarification-test`, 'Page tarification test')
  await testUrl(`${baseUrl}/superadmin/tarification`, 'Page tarification principale')
  
  console.log('\nüìã Instructions:')
  console.log('1. Si vous n\'√™tes pas connect√©: utilisez simulateSuperAdmin()')
  console.log('2. Si vous voulez tester sans auth: utilisez /tarification-test')
  console.log('3. Si vous voulez nettoyer: utilisez clearTestData()')
  
  console.log('\nüéØ Commandes disponibles:')
  console.log('- simulateSuperAdmin() : Simuler une connexion superadmin')
  console.log('- clearTestData() : Effacer les donn√©es de test')
  console.log('- checkAuth() : V√©rifier l\'authentification')
  console.log('- runTests() : Relancer tous les tests')
}

// Exposer les fonctions globalement pour utilisation dans la console
window.simulateSuperAdmin = simulateSuperAdmin
window.clearTestData = clearTestData
window.checkAuth = checkAuth
window.runTests = runTests

// Lancer les tests automatiquement
runTests()













